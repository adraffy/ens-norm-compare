import LABELS from '../eth-labels/db.js';
import {ens_normalize} from '@adraffy/ens-normalize';
import {explode_cp} from '@adraffy/ens-norm-uts46';
import {mkdirSync, writeFileSync} from 'node:fs';
import {hex_cp} from '../utils.js';
import {createHash} from 'node:crypto';

// [4aa0fbe1]
// apl stuff
// https://discuss.ens.domains/t/ens-name-normalization/8652/392
//let chars = explode_cp('⍡⍢⍣⍤⍥⍨⍩⍪⍮⍘⍙⍚⍛⍜⌿⍀⍳⍸⍴⍷⍵⍹⍺⍶⎀⎁⎂⎃⎜⎟⎢⎥⎨⎪⎬⎮⎸⎹⍿⏜⏝⏞⏟⏠⏡');

// [29ab077d]
// general punctuation
// https://discuss.ens.domains/t/ens-name-normalization/8652/396
//let chars = [0x2033,0x2034,0x2036,0x2037,0x2057,0x2016,0x2018,0x2019,0x201A,0x201B,0x201C,0x201D,0x201E,0x201F,0x2020,0x2021,0x2022,0x2023,0x2027,0x2030,0x2031,0x2032,0x2035,0x2038,0x2039,0x203A,0x203D,0x203F,0x2040,0x2041,0x2043,0x2045,0x2046,0x204A,0x204B,0x204C,0x204D,0x204E,0x204F,0x2050,0x2051,0x2052,0x2053,0x2054,0x2055,0x2056,0x2058,0x2059,0x205A,0x205B,0x205D,0x205E];

// [65510c64]
// valid/mapped with 2+ cm
let chars = [0x1D6,0x1D8,0x1DA,0x1DC,0x1DF,0x1E1,0x1ED,0x1FB,0x22B,0x22D,0x231,0x390,0x3B0,0x9CB,0x9CC,0xB48,0xB4B,0xB4C,0xBCA,0xBCB,0xBCC,0xC48,0xCC0,0xCC7,0xCC8,0xCCA,0xCCB,0xD4A,0xD4B,0xD4C,0xDDA,0xDDC,0xDDD,0xDDE,0x1B3B,0x1B3D,0x1B40,0x1B41,0x1B43,0x1E09,0x1E15,0x1E17,0x1E1D,0x1E2F,0x1E39,0x1E4D,0x1E4F,0x1E51,0x1E53,0x1E5D,0x1E65,0x1E67,0x1E69,0x1E79,0x1E7B,0x1EA5,0x1EA7,0x1EA9,0x1EAB,0x1EAD,0x1EAF,0x1EB1,0x1EB3,0x1EB5,0x1EB7,0x1EBF,0x1EC1,0x1EC3,0x1EC5,0x1EC7,0x1ED1,0x1ED3,0x1ED5,0x1ED7,0x1ED9,0x1EDB,0x1EDD,0x1EDF,0x1EE1,0x1EE3,0x1EE9,0x1EEB,0x1EED,0x1EEF,0x1EF1,0x1F02,0x1F03,0x1F04,0x1F05,0x1F06,0x1F07,0x1F12,0x1F13,0x1F14,0x1F15,0x1F22,0x1F23,0x1F24,0x1F25,0x1F26,0x1F27,0x1F32,0x1F33,0x1F34,0x1F35,0x1F36,0x1F37,0x1F42,0x1F43,0x1F44,0x1F45,0x1F52,0x1F53,0x1F54,0x1F55,0x1F56,0x1F57,0x1F62,0x1F63,0x1F64,0x1F65,0x1F66,0x1F67,0x1FD2,0x1FD7,0x1FE2,0x1FE7,0x1112E,0x1112F,0x1134B,0x1134C,0x114BB,0x114BC,0x114BE,0x115BA,0x115BB,0x11938,0x344,0xF73,0xF75,0xF76,0xF77,0xF78,0xF79,0xF81,0xF93,0xF9D,0xFA2,0xFA7,0xFAC,0xFB9,0xFB2C,0xFB2D,0xFCF2,0xFCF3,0xFCF4,0x1D160,0x1D161,0x1D162,0x1D163,0x1D164,0x1D1BD,0x1D1BE,0x1D1BF,0x1D1C0];


chars = [...new Set(chars)];
console.log(chars);
console.log(chars.length);

let out_dir = new URL('./output/', import.meta.url);
mkdirSync(out_dir, {recursive: true});

let buckets = chars.map(() => []);
for (let label of LABELS) {
	let cps = explode_cp(label);
	for (let i = 0; i < chars.length; i++) {
		if (cps.includes(chars[i])) {
			buckets[i].push(label);
		}
	}
}

let tally = Object.fromEntries(chars.map((cp, i) => [`${hex_cp(cp)} ${String.fromCodePoint(cp)}`, buckets[i].length]))
let valid = [...new Set(buckets.flat())].filter(s => {
	try {
		ens_normalize(s);
		return true;
	} catch (err) {		
	}
});

console.log(tally);
console.log({
	total: buckets.reduce((a, x) => a + x.length, 0),
	valid: valid.length
});

let hash = createHash('sha256').update(String.fromCodePoint(...chars)).digest().toString('hex').slice(2, 10);
writeFileSync(new URL(`./frequency-${hash}.json`, out_dir), JSON.stringify({tally, valid}, null, '\t'));
console.log(`Hash: ${hash}`);
